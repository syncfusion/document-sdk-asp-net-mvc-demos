﻿using System;
using System.Drawing;
using System.IO;
using System.Web.Mvc;
using Syncfusion.Pdf;
using Syncfusion.Pdf.Graphics;
using Syncfusion.HtmlConverter;

namespace HtmlToPdfMvc.Controllers
{
    public class HomeController : Controller
    {
        string sourceUrl = string.Empty;

        string chkEnableJavaScript = string.Empty;
        string chkEnableHyperlink = string.Empty;
        string chkEnableToc = string.Empty;
        string chkEnableBookmark = string.Empty;
        string chkEnableSinglePage = string.Empty;

        string pagemargin = string.Empty;
        string rotate = string.Empty;
        string rdbtnOrientation = string.Empty;
        string showHeader = string.Empty;
        string showFooter = string.Empty;

        string jsAdditionalDelay = string.Empty;
        public ActionResult Index()
        {
            return View();
        }
        [HttpPostAttribute]
        public ActionResult HtmlToPDF(string TextBox1, string chkJavaScript, string chkHyperlink, string chkSinglePage, string chkToc, string chkBookMark, string margin, string DropDownList2, string RadioButtonList2, string CheckBox2, string CheckBox3, string txtAdditionalDelay)
        {
            sourceUrl = TextBox1;

            chkEnableJavaScript = chkJavaScript;
            chkEnableHyperlink = chkHyperlink;
            chkEnableToc = chkToc;
            chkEnableBookmark = chkBookMark;
            chkEnableSinglePage = chkSinglePage;

            pagemargin = margin;
            rotate = DropDownList2;
            rdbtnOrientation = RadioButtonList2;
            showHeader = CheckBox2;
            showFooter = CheckBox3;

            jsAdditionalDelay = txtAdditionalDelay;

            MemoryStream stream = ConvertHTMLtoPDF();

            return File(stream.ToArray(), System.Net.Mime.MediaTypeNames.Application.Pdf, "Sample.pdf");

        }

        private MemoryStream ConvertHTMLtoPDF()
        {
            //Initialize HTML to PDF converter.
            HtmlToPdfConverter htmlConverter = new HtmlToPdfConverter();
            BlinkConverterSettings converterSettings = new BlinkConverterSettings();

            //Set page margins
            converterSettings.Margin = new PdfMargins() { All = float.Parse(pagemargin) };

            //Set page orientation
            if (rdbtnOrientation == "Portrait")
                converterSettings.Orientation = PdfPageOrientation.Portrait;
            else
                converterSettings.Orientation = PdfPageOrientation.Landscape;

            //Set rotation
            converterSettings.PageRotateAngle = (PdfPageRotateAngle)Enum.Parse(typeof(PdfPageRotateAngle), rotate);

            //Enable Javascript
            converterSettings.EnableJavaScript = chkEnableJavaScript == "on" ? true : false;

            //Enable Hyperlink
            converterSettings.EnableHyperLink = chkEnableHyperlink == "on" ? true : false;

            bool IsSinglePage = chkEnableSinglePage == "on" ? true : false;
            if (IsSinglePage)
            {
                //Enable Single page layout
                converterSettings.SinglePageLayout = Syncfusion.Pdf.HtmlToPdf.SinglePageLayout.FitWidth;
            }

            //Enabel Toc
            converterSettings.EnableToc = chkEnableToc == "on" ? true : false;

            //Enable Bookmark
            converterSettings.EnableBookmarks = chkEnableBookmark == "on" ? true : false;

            converterSettings.ViewPortSize = new Size(1920, 0);

            //Set additional delay
            if (int.TryParse(jsAdditionalDelay, out int additionalDelay))
                converterSettings.AdditionalDelay = additionalDelay * 1000;

            //Adding Header
            if (showHeader == "on")
                converterSettings.PdfHeader = this.AddHeader(converterSettings.PdfPageSize.Width, "Syncfusion Essential PDF", " ");

            //Adding Footer
            if (showFooter == "on")
                converterSettings.PdfFooter = this.AddFooter(converterSettings.PdfPageSize.Height, "@Copyright 2022");

            //Assign settings to HTML converter
            htmlConverter.ConverterSettings = converterSettings;

            //Convert url to pdf
            PdfDocument document = htmlConverter.Convert(sourceUrl);

            MemoryStream stream = new MemoryStream();

            //Save and close the output PDF document
            document.Save(stream);
            document.Close();

            return stream;
        }

        #region Helpher Methods
        /// <summary>
        /// Adds header to the document
        /// </summary>
        /// <param name="width"></param>
        /// <param name="title"></param>
        /// <param name="description"></param>
        private PdfPageTemplateElement AddHeader(float width, string title, string description)
        {
            RectangleF rect = new RectangleF(0, 0, width, 50);
            //Create a new instance of PdfPageTemplateElement class.     
            PdfPageTemplateElement header = new PdfPageTemplateElement(rect);
            PdfGraphics g = header.Graphics;

            //Draw title.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 16, PdfFontStyle.Bold);
            PdfSolidBrush brush = new PdfSolidBrush(Color.FromArgb(44, 71, 120));
            float x = (width / 2) - (font.MeasureString(title).Width) / 2;
            g.DrawString(title, font, brush, new RectangleF(x, (rect.Height / 4) + 3, font.MeasureString(title).Width, font.Height));

            //Draw description
            brush = new PdfSolidBrush(Color.Gray);
            font = new PdfStandardFont(PdfFontFamily.Helvetica, 16, PdfFontStyle.Bold);
            PdfStringFormat format = new PdfStringFormat(PdfTextAlignment.Left, PdfVerticalAlignment.Bottom);
            g.DrawString(description, font, brush, new RectangleF(0, 0, header.Width, header.Height - 8), format);

            //Draw some lines in the header
            PdfPen pen = new PdfPen(Color.DarkBlue, 0.7f);
            g.DrawLine(pen, 0, 0, header.Width, 0);
            pen = new PdfPen(Color.DarkBlue, 2f);
            g.DrawLine(pen, 0, 03, header.Width + 3, 03);
            pen = new PdfPen(Color.DarkBlue, 2f);
            g.DrawLine(pen, 0, header.Height - 3, header.Width, header.Height - 3);
            g.DrawLine(pen, 0, header.Height, header.Width, header.Height);

            return header;
        }

        /// <summary>
        /// Adds footer to the document
        /// </summary>
        /// <param name="width"></param>
        /// <param name="footerText"></param>
        private PdfPageTemplateElement AddFooter(float width, string footerText)
        {
            RectangleF rect = new RectangleF(0, 0, width, 50);
            //Create a new instance of PdfPageTemplateElement class.
            PdfPageTemplateElement footer = new PdfPageTemplateElement(rect);
            PdfGraphics g = footer.Graphics;

            // Draw footer text.
            PdfSolidBrush brush = new PdfSolidBrush(Color.Gray);
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 6, PdfFontStyle.Bold);
            float x = (width / 2) - (font.MeasureString(footerText).Width) / 2;
            g.DrawString(footerText, font, brush, new RectangleF(x, g.ClientSize.Height - 10, font.MeasureString(footerText).Width, font.Height));

            //Create page number field
            PdfPageNumberField pageNumber = new PdfPageNumberField(font, brush);

            //Create page count field
            PdfPageCountField count = new PdfPageCountField(font, brush);

            PdfCompositeField compositeField = new PdfCompositeField(font, brush, "Page {0} of {1}", pageNumber, count);
            compositeField.Bounds = footer.Bounds;
            compositeField.Draw(g, new PointF(470, 40));

            return footer;

        }
        # endregion
    }
}